{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GIFExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","console","log","target","getGifs","category","a","url","encodeURI","fetch","respueta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GIFExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAc5C,OACI,sBAAMC,SATS,SAACC,GAChBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IAExBR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACnCN,EAAc,MAIlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBY,SAACP,GACrBQ,QAAQC,IAAIT,EAAEU,OAAOJ,OACrBR,EAAcE,EAAEU,OAAOJ,a,+BCPlBK,EAAO,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DACXC,EADW,iDACmCC,UAAUH,GAD7C,qEAGKI,MAAMF,GAHX,cAGXG,EAHW,gBAIGA,EAASC,OAJZ,uBAIVC,EAJU,EAIVA,KACDC,EAAMD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACtB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATzB,kBAYVM,GAZU,4CAAD,sDCEPO,EAAc,SAAC,GAAoB,IAAnBJ,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OADAN,QAAQC,IAAIc,EAAGC,EAAMV,GAEjB,sBAAKc,UAAU,yCAAf,UAEI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACxB,4BAAIA,QCFCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECHX,SAACA,GAAc,IAAD,EAChBhB,mBAAS,CAC3BuB,KAAK,GACLa,SAAQ,IAH0B,mBAChCC,EADgC,KAC1BC,EAD0B,KA+BtC,OAxBAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAC,GACF7B,QAAQC,IAAI4B,GACZH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAKjB,CAACpB,IAaGqB,EDvBqBK,CAAa1B,GAA7Ba,EALuB,EAK5BN,KAAYa,EALgB,EAKhBA,QAKnB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAGZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OAEV,aADA,CACC,EAAD,eAGQA,GADCA,EAAIC,aExBxBgB,EAAe,WAAO,IAAD,EAEM3C,mBAAS,CAAC,cAFhB,mBAEvB4C,EAFuB,KAEX7C,EAFW,KAW9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ6C,EAAWnB,KAAI,SAAAT,GAAQ,OAEnB,aADA,CACC,EAAD,CAEIA,SAAUA,GADLA,YCpBjC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.553e263b.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange=(e)=>{\n        console.log(e.target.value);\n        setInputValue(e.target.value);\n    };\n    const handleSubmit=(e)=>{//esto es para que no se refresque toda la pagina\n        e.preventDefault();\n        if(inputValue.trim().length>2){\n            // console.log('Submit hecho');\n            setCategories(cats=>[inputValue,...cats]);\n            setInputValue('');\n        }\n    };\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes={\n    setCategories:PropTypes.func.isRequired\n};","export const getGifs=async(category)=>{\n    const url=`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}\n    &limit=10&api_key=gE36PfoSBzRDw5MacYCIOfUxN1OCRv3z`;\n    const respueta= await fetch(url);\n    const {data} =await respueta.json();\n    const gifs =data.map(img=>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n}\n","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n    console.log(id,title,url);\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            {/* {img.title} */}\n            <img src={url} alt={title}></img>\n        <p>{title}</p>\n        </div>\n    )\n}\n","// import React, {useState, useEffect}from 'react'\nimport React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n// import { getGifs } from '../helpers/getGifs';\n\nexport const GifGrid = ({category}) => {\n\n  \n\n\n    const {data:images,loading}=useFetchGifs(category);\n\n   \n\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n\n            {/* {loading? 'Cargando.....':'Data carga'} */}\n            <div className=\"card-grid\">\n                {\n                    images.map(img=>(\n                        // <li key={id}>{title}</li>\n                        <GifGridItem \n                            //img={img}\n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n                \n            </div>\n        </>\n    )\n}\n","import  { useState,useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n   const [state,setState]=useState({\n        data:[],\n        loading:true\n\n    });\n\n    useEffect(() => {\n        getGifs(category)\n        .then(imgs=>{\n            console.log(imgs)\n            setState({\n                data:imgs,\n                loading:false\n            })\n            \n        })\n      \n    }, [category])\n\n      // const [images, setImages] = useState([])\n    // useEffect(()=>{// el componente solo se renderesia cuando se inicializa por primera vez\n    //     getGifs(category).then(setImages);\n    // },[category])\n    // setTimeout(()=>{\n    //     setState({\n    //         data:[0,1,2,3,4,5,6,7,8,9],\n    //         loading:false\n    \n    //     },3000)\n    // });\n    return state;\n}\n","import React,{useState}from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GIFExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd =()=>{\n    //     // setCategories([...categories,'Naruto']);\n    //     setCategories(cats=>[...cats,'Naruto']);\n    //     // categories.push('Naruto');\n        \n    // }\n    // console.log(categories);\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n            <ol>\n                {\n                    categories.map(category=>(\n                        // return <li key={category}>{category}</li>\n                        <GifGrid \n                            key={category}\n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n           \n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GIFExpertApp } from './GIFExpertApp';\n\n\nReactDOM.render(\n    <GIFExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}